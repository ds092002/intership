
(1) => remove facebbok id add google id and remove google id and add facebook id
const UserServices = require('../service/socialMedia.service');
const userService = new UserServices();
const bcryptjs = require('bcryptjs');
const jwt = require('jsonwebtoken');
require('dotenv').config();

exports.socialMediaLogin = async (req, res) => {
    try {
        const { email, password, userName, facebook_id, google_id, photo, login_Type } = req.body;

        if (!email) {
            return res.status(400).json({ message: "Email is required." });
        }

        let loginType = login_Type || (google_id ? "google" : facebook_id ? "facebook" : "normal");

        let user = await userService.getUser({ email });

        if (user) {
            if (google_id && user.facebook_id) {
                // ✅ Remove Facebook ID, set Google ID, and remove loginType
                await userService.updateUser(user._id, { google_id, facebook_id: null, loginType: null });
                return res.status(200).json({ message: "User is now registered with Google.", user });
            } 
            else if (facebook_id && user.google_id) {
                // ✅ Remove Google ID, set Facebook ID, and remove loginType
                await userService.updateUser(user._id, { facebook_id, google_id: null, loginType: null });
                return res.status(200).json({ message: "User is now registered with Facebook." ,user});
            } 
            else if (google_id) {
                if (user.google_id !== google_id) {
                    return res.status(400).json({ message: "Google ID does not belong to this account. Please check your Google ID and email." });
                }
            } 
            else if (facebook_id) {
                if (user.facebook_id !== facebook_id) {
                    return res.status(400).json({ message: "Facebook ID does not belong to this account. Please check your Facebook ID and email." });
                }
            } 
            else {
                if (!password) {
                    return res.status(400).json({ message: "Password is required for login." });
                }
                let checkPassword = await bcryptjs.compare(password, user.password);
                if (!checkPassword) {
                    return res.status(400).json({ message: "Incorrect password. Please try again." });
                }
            }

            let token = jwt.sign({ userId: user._id, loginType }, process.env.SECRET_KEY, { expiresIn: "7d" });

            return res.status(200).json({
                user: {
                    _id: user._id,
                    email: user.email,
                    userName: user.userName,
                    photo: user.photo,
                    loginType,
                    google_id: user.google_id,
                    facebook_id: user.facebook_id
                },
                token,
                message: `Login successful with ${loginType}`
            });
        }

        if (!password && !google_id && !facebook_id) {
            return res.status(400).json({ message: "Password is required for new users." });
        }

        const hashPassword = password ? await bcryptjs.hash(password, 10) : null;

        let newUser = {
            email,
            userName: userName || email.split('@')[0],
            password: hashPassword,
            loginType,
            photo,
            google_id: google_id || null,
            facebook_id: facebook_id || null
        };

        user = await userService.addNewUser(newUser);

        return res.status(201).json({
            user: {
                _id: user._id,
                email: user.email,
                userName: user.userName,
                loginType,
                photo: user.photo,
                google_id: user.google_id,
                facebook_id: user.facebook_id
            },
            message: `User registered successfully with ${loginType}`
        });

    } catch (error) {
        console.log(error);
        res.status(500).json({ message: `Internal Server Error... ${error.message}` });
    }
};

(2) successfully remove old i d and add new id
const UserServices = require('../service/socialMedia.service');
const userService = new UserServices();
const bcryptjs = require('bcryptjs');
const jwt = require('jsonwebtoken');
require('dotenv').config();

exports.socialMediaLogin = async (req, res) => {
    try {
        const { email, password, userName, facebook_id, google_id, photo, login_Type } = req.body;

        if (!email) {
            return res.status(400).json({ message: "Email is required." });
        }

        let loginType = login_Type || (google_id ? "google" : facebook_id ? "facebook" : "normal");

        let user = await userService.getUser({ email });

        if (user) {
            let updatedFields = {};
            let message = "";

            if (google_id) {
                if (user.facebook_id) {
                    // ✅ Remove Facebook ID when switching to Google
                    updatedFields = { google_id, loginType: "google", facebook_id: null };
                    message = "User is now registered with Google.";
                } else if (user.google_id !== google_id) {
                    return res.status(400).json({ message: "Google ID does not belong to this account. Please check your Google ID and email." });
                } else {
                    message = "Login successful with Google.";
                }
            } 
            else if (facebook_id) {
                if (user.google_id) {
                    // ✅ Remove Google ID when switching to Facebook
                    updatedFields = { facebook_id, loginType: "facebook", google_id: null };
                    message = "User is now registered with Facebook.";
                } else if (user.facebook_id !== facebook_id) {
                    return res.status(400).json({ message: "Facebook ID does not belong to this account. Please check your Facebook ID and email." });
                } else {
                    message = "Login successful with Facebook.";
                }
            } 
            else {
                if (!password) {
                    return res.status(400).json({ message: "Password is required for login." });
                }
                let checkPassword = await bcryptjs.compare(password, user.password);
                if (!checkPassword) {
                    return res.status(400).json({ message: "Incorrect password. Please try again." });
                }
                message = "Login successful.";
            }

            if (Object.keys(updatedFields).length > 0) {
                await userService.updateUser(user._id, updatedFields);
                user = await userService.getUser({ email }); // Fetch updated user data
            }

            let token = jwt.sign({ userId: user._id, loginType: user.loginType }, process.env.SECRET_KEY, { expiresIn: "7d" });

            return res.status(200).json({
                user: {
                    _id: user._id,
                    email: user.email,
                    userName: user.userName,
                    photo: user.photo,
                    loginType: user.loginType,
                    google_id: user.google_id || null,
                    facebook_id: user.facebook_id || null
                },
                token,
                message
            });
        }

        // ✅ New User Registration
        if (!password && !google_id && !facebook_id) {
            return res.status(400).json({ message: "Password is required for new users." });
        }

        const hashPassword = password ? await bcryptjs.hash(password, 10) : null;

        let newUser = {
            email,
            userName: userName || email.split('@')[0],
            password: hashPassword,
            loginType,
            photo
        };

        let message = "User registered successfully";
        if (google_id) {
            newUser.google_id = google_id;
            newUser.loginType = "google";
            message = "User registered with Google.";
        }
        if (facebook_id) {
            newUser.facebook_id = facebook_id;
            newUser.loginType = "facebook";
            message = "User registered with Facebook.";
        }

        user = await userService.addNewUser(newUser);

        return res.status(201).json({
            user: {
                _id: user._id,
                email: user.email,
                userName: user.userName,
                loginType: user.loginType,
                photo: user.photo,
                google_id: user.google_id || null,
                facebook_id: user.facebook_id || null
            },
            message
        });

    } catch (error) {
        console.log(error);
        res.status(500).json({ message: `Internal Server Error... ${error.message}` });
    }
};



now add some other functionlty i know when i impliment i don't know please you do that code was half one empty and unlogicalble but understand give correct and perfect code

ex=

first check email and email require condition then

if(login_type === "normal" && password !== ""){
    if(user.login_Type ===  ""){}
    if(user-> email === email){
        console.log("login succesfuly with logintype)
    }else{
        register new user
    }
}
if(login_type === "google" && password !== ""){
    if(user.login_Type ===  ""){}
    if(user-> email === email){
        console.log("login succesfuly with logintype)
    }else{
        register new user
    }
}
if(login_type === "facebook" && password !== ""){
    if(user.login_Type ===  ""){}
    if(user-> email === email){
        console.log("login succesfuly with logintype)
    }else{
        register new user
    }
}

\end{code}

(3) => 

const UserServices = require('../service/socialMedia.service');
const userService = new UserServices();
const bcryptjs = require('bcryptjs');
const jwt = require('jsonwebtoken');
require('dotenv').config();

exports.socialMediaLogin = async (req, res) => {
    try {
        const { email, password, userName, facebook_id, google_id, photo, login_Type } = req.body;

        if (!email) {
            return res.status(400).json({ message: "Email is required." });
        }

        let loginType = login_Type || (google_id ? "google" : facebook_id ? "facebook" : "normal");

        let user = await userService.getUser({ email });

        if (user) {
            let updatedFields = {};
            let message = "";

            if (loginType === "normal" && password) {
                if (!user.password) {
                    return res.status(400).json({ message: "No password set for this account. Try logging in with Google or Facebook." });
                }
                let checkPassword = await bcryptjs.compare(password, user.password);
                if (!checkPassword) {
                    return res.status(400).json({ message: "Incorrect password. Please try again." });
                }
                message = "Login successful with Normal.";
            }

            else if (loginType === "google") {
                if (user.google_id) {
                    if (user.google_id !== google_id) {
                        return res.status(400).json({ message: "Google ID does not match this account." });
                    }
                    message = "Login successful with Google.";
                } else {
                    updatedFields = { google_id, facebook_id: null, loginType: "google" };
                    message = "User is now registered with Google.";
                }
            }

            else if (loginType === "facebook") {
                if (user.facebook_id) {
                    if (user.facebook_id !== facebook_id) {
                        return res.status(400).json({ message: "Facebook ID does not match this account." });
                    }
                    message = "Login successful with Facebook.";
                } else {
                    updatedFields = { facebook_id, google_id: null, loginType: "facebook" };
                    message = "User is now registered with Facebook.";
                }
            }

            if (Object.keys(updatedFields).length > 0) {
                await userService.updateUser(user._id, updatedFields);
                user = await userService.getUser({ email });
            }

            let token = jwt.sign({ userId: user._id, loginType: user.loginType }, process.env.SECRET_KEY, { expiresIn: "7d" });

            return res.status(200).json({
                user: {
                    _id: user._id,
                    email: user.email,
                    userName: user.userName,
                    photo: user.photo,
                    loginType: user.loginType,
                    google_id: user.google_id || null,
                    facebook_id: user.facebook_id || null
                },
                token,
                message
            });
        }

        if (!password && !google_id && !facebook_id) {
            return res.status(400).json({ message: "Password is required for new users." });
        }

        const hashPassword = password ? await bcryptjs.hash(password, 10) : null;

        let newUser = {
            email,
            userName: userName || email.split('@')[0],
            password: hashPassword,
            loginType,
            photo
        };

        let message = "User registered successfully";
        if (google_id) {
            newUser.google_id = google_id;
            newUser.loginType = "google";
            message = "User registered with Google.";
        }
        if (facebook_id) {
            newUser.facebook_id = facebook_id;
            newUser.loginType = "facebook";
            message = "User registered with Facebook.";
        }

        user = await userService.addNewUser(newUser);

        return res.status(201).json({
            user: {
                _id: user._id,
                email: user.email,
                userName: user.userName,
                loginType: user.loginType,
                photo: user.photo,
                google_id: user.google_id || null,
                facebook_id: user.facebook_id || null
            },
            message
        });

    } catch (error) {
        console.log(error);
        res.status(500).json({ message: `Internal Server Error... ${error.message}` });
    }
};


(4) =>
const UserServices = require('../service/socialMedia.service');
const userService = new UserServices();
const bcryptjs = require('bcryptjs');
const jwt = require('jsonwebtoken');
require('dotenv').config();

exports.socialMediaLogin = async (req, res) => {
    try {
        let { email, password, userName, facebook_id, google_id, photo, login_Type } = req.body;

        if (!email) {
            return res.status(400).json({ message: "Email is required." });
        }

        let loginType = login_Type || (google_id ? "google" : facebook_id ? "facebook" : "normal");
        let user = await userService.getUser({ email });

        let updatedFields = {};
        let message = "";

        if (user) {
            if (
                (loginType === "google" && user.facebook_id) ||
                (loginType === "facebook" && user.google_id) ||
                (loginType === "normal" && (user.google_id || user.facebook_id))
            ) {
                return res.status(400).json({ message: "This email is already registered with a different login method. Please use the correct login method." });
            }

            if (loginType === "normal") {
                if (!password) {
                    return res.status(400).json({ message: "Password is required for login." });
                }
                const checkPassword = await bcryptjs.compare(password, user.password);
                if (!checkPassword) {
                    return res.status(400).json({ message: "Incorrect password. Please try again." });
                }
                message = "Login successful with normal.";
            } else if (loginType === "google") {
                if (user.google_id) {
                    if (user.google_id !== google_id) {
                        return res.status(400).json({ message: "Google ID does not match this account." });
                    }
                    message = "Login successful with Google.";
                } else {
                    updatedFields = { google_id, facebook_id: null, loginType: "google" };
                    message = "User is now registered with Google.";
                }
            } else if (loginType === "facebook") {
                if (user.facebook_id) {
                    if (user.facebook_id !== facebook_id) {
                        return res.status(400).json({ message: "Facebook ID does not match this account." });
                    }
                    message = "Login successful with Facebook.";
                } else {
                    updatedFields = { facebook_id, google_id: null, loginType: "facebook" };
                    message = "User is now registered with Facebook.";
                }
            }

            if (login_Type === "google" || login_Type === "facebook") {
                if (!password) {
                    password = user?.password || null;
                }
            }

            if (Object.keys(updatedFields).length > 0) {
                await userService.updateUser(user._id, updatedFields);
                Object.assign(user, updatedFields);
                return res.status(200).json({
                    user: {
                        _id: user._id,
                        email: user.email,
                        userName: user.userName,
                        photo: user.photo,
                        loginType,
                        google_id: user.google_id,
                        facebook_id: user.facebook_id
                    },
                    message
                });
            }

            const token = jwt.sign({ userId: user._id, loginType }, process.env.SECRET_KEY);
            return res.status(200).json({
                user: {
                    _id: user._id,
                    email: user.email,
                    userName: user.userName,
                    photo: user.photo,
                    loginType,
                    google_id: user.google_id,
                    facebook_id: user.facebook_id
                },
                token,
                message
            });
        }

        if (!password) {
            return res.status(400).json({ message: "Password is required for new users." });
        }

        const hashPassword = await bcryptjs.hash(password, 10);
        let newUser = {
            email,
            userName: userName || email.split('@')[0],
            password: hashPassword,
            loginType,
            photo,
            google_id: google_id || null,
            facebook_id: facebook_id || null
        };

        user = await userService.addNewUser(newUser);

        return res.status(201).json({
            user: {
                _id: user._id,
                email: user.email,
                userName: user.userName,
                loginType,
                photo: user.photo,
                google_id: user.google_id,
                facebook_id: user.facebook_id
            },
            message: `User registered successfully with ${loginType}`
        });

    } catch (error) {
        console.log(error);
        res.status(500).json({ message: `Internal Server Error... ${error.message}` });
    }
};





auth
const jwt = require("jsonwebtoken");
const UserModel = require("../model/socialMedia.model");

const authMiddleware = async (req, res, next) => {
  try {
    let token = req.cookies.token || req.header("Authorization")?.replace("Bearer ", "");

    if (!token) {
      return res.status(401).json({ message: "Unauthorized: No token provided" });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await UserModel.findById(decoded.id).select("-password");

    if (!user) {
      return res.status(401).json({ message: "Unauthorized: Invalid token" });
    }

    req.user = user; // Attach user to request
    next();
  } catch (error) {
    return res.status(401).json({ message: "Unauthorized: Invalid token" });
  }
};

module.exports = authMiddleware;


Guest Mode add to cart api

const UserModel = require("../model/socialMedia.model");
const ProductModel = require("../model/product.model");
const CartModel = require("../model/cart.model");

// Helper function to get guest cart from cookies
const getGuestCart = (req) => {
  return req.cookies.cart ? JSON.parse(req.cookies.cart) : [];
};

// Helper function to save guest cart to cookies
const saveGuestCart = (res, cart) => {
  res.cookie("cart", JSON.stringify(cart), { httpOnly: true, maxAge: 7 * 24 * 60 * 60 * 1000 }); // 7 days
};

// Add to Cart Functionality for both Guest & Logged-in Users
exports.addToCart = async (req, res) => {
  try {
    const { cartItem, quantity = 1 } = req.body;

    if (!cartItem) {
      return res.status(400).json({ message: "Product (cartItem) is required" });
    }

    // Fetch product details
    const product = await ProductModel.findById(cartItem);
    if (!product) {
      return res.status(404).json({ message: "Product not found" });
    }

    // ✅ If user is logged in → store cart in DB
    if (req.user && req.user._id) {
      const userId = req.user._id;

      let cart = await CartModel.findOne({ user: userId, cartItem, isDelete: false });

      if (cart) {
        cart.quantity += quantity;
        await cart.save();
        return res.status(200).json({ message: `Cart updated: Quantity increased`, cart });
      }

      cart = new CartModel({
        user: userId,
        cartItem: product._id,
        productName: product.name,
        price: product.price,
        description: product.description,
        quantity,
      });

      await cart.save();
      return res.status(201).json({ message: `Item added to cart successfully`, cart });
    }

    // ✅ If user is **not logged in** (Guest) → store cart in cookies
    let guestCart = getGuestCart(req);

    let existingItem = guestCart.find((item) => item.cartItem === cartItem);
    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      guestCart.push({
        cartItem: product._id,
        productName: product.name,
        price: product.price,
        description: product.description,
        quantity,
      });
    }

    saveGuestCart(res, guestCart);

    return res.status(201).json({ message: `Item added to guest cart successfully`, guestCart });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: `Internal Server Error... ${error.message}` });
  }
};

exports.mergeCartAfterLogin = async (req, res) => {
  try {
    if (!req.user || !req.user._id) {
      return res.status(401).json({ message: "Unauthorized: User not found" });
    }

    const userId = req.user._id;
    let guestCart = getGuestCart(req);

    for (let item of guestCart) {
      let existingCartItem = await CartModel.findOne({ user: userId, cartItem: item.cartItem });

      if (existingCartItem) {
        existingCartItem.quantity += item.quantity;
        await existingCartItem.save();
      } else {
        await CartModel.create({
          user: userId,
          cartItem: item.cartItem,
          productName: item.productName,
          price: item.price,
          description: item.description,
          quantity: item.quantity,
        });
      }
    }

    res.clearCookie("cart"); // Remove guest cart after merging
    return res.status(200).json({ message: "Guest cart merged with user cart" });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: `Internal Server Error... ${error.message}` });
  }
};

exports.getCart = async (req, res) => {
  try {
    if (req.user && req.user._id) {
      const userId = req.user._id;
      const cart = await CartModel.find({ user: userId, isDelete: false }).populate("cartItem");
      return res.status(200).json({ cart });
    }

    const guestCart = getGuestCart(req);
    return res.status(200).json({ guestCart });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: `Internal Server Error... ${error.message}` });
  }
};

exports.clearGuestCart = (req, res) => {
  res.clearCookie("cart");
  return res.status(200).json({ message: "Guest cart cleared successfully" });
};


const express = require("express");
const router = express.Router();
const cartController = require("../controller/cart.controller");
const authMiddleware = require("../middleware/authMiddleware"); // For user authentication

router.post("/add", cartController.addToCart);
router.get("/get", cartController.getCart);
router.post("/merge", authMiddleware, cartController.mergeCartAfterLogin);
router.delete("/clear-guest", cartController.clearGuestCart);

module.exports = router;


==>  with cookie store guestid cart and loger user cart

const jwt = require("jsonwebtoken");
const CartModel = require("../model/cart.model");
const UserModel = require("../model/socialMedia.model");
const ProductModel = require("../model/product.model");
const { v4: uuidv4 } = require("uuid");
require("dotenv").config();

exports.addToCart = async (req, res) => {
    try {
        const { quantity = 1, cartItem } = req.body;

        let userId = null;
        let isGuest = false;

        req.cookies = req.cookies || {};

        const authorization = req.headers["authorization"];
        if (authorization && authorization.startsWith("Bearer ")) {
            const token = authorization.split(" ")[1];
            try {
                const decoded = jwt.verify(token, process.env.SECRET_KEY);
                userId = decoded.userId;
            } catch (err) {
                return res.status(401).json({ message: "Unauthorized: Invalid token" });
            }
        }

        let guestId = null;
        if (!userId) {
            isGuest = true;
            guestId = req.cookies.guestId || uuidv4();
            res.cookie("guestId", guestId, { httpOnly: true, maxAge: 7 * 24 * 60 * 60 * 1000 });
        }

        const product = await ProductModel.findById(cartItem).select("name price description");
        if (!product) {
            return res.status(404).json({ message: "Product not found" });
        }

        let userDetails = null;
        if (!isGuest) {
            userDetails = await UserModel.findById(userId).select("userName email");
        }

        let cart = await CartModel.findOne({
            $or: [{ user: userId }, { guestId: guestId }],
            cartItem: cartItem,
            isDelete: false
        });

        if (cart) {
          cart.quantity += quantity;
          cart.totalPrice = cart.quantity * product.price;
          await cart.save();
          return res.status(200).json({ message: `Cart updated: Quantity increased`, cart });
      }

      let totalPrice = product.price * quantity;

        cart = new CartModel({
            user: isGuest ? null : userId,
            guestId: isGuest ? guestId : null,
            cartItem: product._id,
            productName: product.name,      
            price: product.price,           
            description: product.description,
            quantity: quantity,
            totalPrice: totalPrice,
            userName: userDetails ? userDetails.userName : "Guest",
            email: userDetails ? userDetails.email : null,
        });

        await cart.save();

        return res.status(201).json({
            message: "Item added to cart successfully",
            cart
        });
    } catch (error) {
        console.log(error);
        res.status(500).json({ message: `Internal Server Error: ${error.message}` });
    }
};

model
const mongoose = require("mongoose");

const cartSchema = mongoose.Schema(
  {
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Social-Media",
      default: null,
    },
    guestId: {
      type: String,
      default: null,
    },
    cartItem: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "products",
      required: true,
    },
    productName: { 
      type: String, 
      required: true 
    },
    price: { 
      type: Number, 
      required: true 
    },
    description: { 
      type: String, 
      required: true 
    },
    totalPrice:{
      type: Number,
      require: true
    },
    quantity: {
      type: Number,
      default: 1,
    },
    userName: {
      type: String,
      default: null,
    },
    email: {
      type: String,
      default: null,
    },
    isDelete: {
      type: Boolean,
      default: false,
    },
  },
  {
    versionKey: false,
    timestamps: true,
  }
);

module.exports = mongoose.model("cart", cartSchema);


ip with original ip addres
const jwt = require("jsonwebtoken");
const CartModel = require("../model/cart.model");
const UserModel = require("../model/socialMedia.model");
const ProductModel = require("../model/product.model");
require("dotenv").config();

exports.addToCart = async (req, res) => {
    try {
        const { quantity = 1, cartItem, ipAddress } = req.body;

        if (!ipAddress) {
            return res.status(400).json({ message: "IP address is required" });
        }

        let userId = null;

        const authorization = req.headers["authorization"];
        if (authorization && authorization.startsWith("Bearer ")) {
            const token = authorization.split(" ")[1];
            try {
                const decoded = jwt.verify(token, process.env.SECRET_KEY);
                userId = decoded.userId;
            } catch (err) {
                return res.status(401).json({ message: "Unauthorized: Invalid token" });
            }
        }

        const product = await ProductModel.findById(cartItem).select("name price description");
        if (!product) {
            return res.status(404).json({ message: "Product not found" });
        }

        let userDetails = null;
        if (userId) {
            userDetails = await UserModel.findById(userId).select("userName email");
        }

        if (!userId && !(ipAddress.startsWith("192.168.") || ipAddress.startsWith("10.0."))) {
            return res.status(400).json({ message: "Invalid IP address" });
        }

        let cart = await CartModel.findOne({
            $or: [{ user: userId }, { ipAddress: ipAddress }],
            cartItem: cartItem,
            isDelete: false
        });

        if (cart) {
            cart.quantity += quantity;
            cart.totalPrice = cart.quantity * product.price;
            await cart.save();
            return res.status(200).json({ message: `Cart updated: Quantity increased`, cart });
        }

        let totalPrice = product.price * quantity;

        cart = new CartModel({
            userId: userId || null,
            ipAddress: userId ? null : ipAddress,
            cartItem: product._id,
            productName: product.name,      
            price: product.price,           
            description: product.description,
            quantity: quantity,
            totalPrice: totalPrice,
            userName: userDetails ? userDetails.userName : "Guest",
            email: userDetails ? userDetails.email : null,
        });

        await cart.save();

        return res.status(201).json({
            message: "Item added to cart successfully",
            cart
        });
    } catch (error) {
        console.log(error);
        res.status(500).json({ message: `Internal Server Error: ${error.message}` });
    }
};

exports.mergeGuestCart = async (req, res) => {
    try {
        const { userId } = req.user;
        const { ipAddress } = req.body;

        if (!userId) {
            return res.status(401).json({ message: "Unauthorized: User not found" });
        }
        if (!ipAddress) {
            return res.status(400).json({ message: "IP address is required" });
        }

        const guestCartItems = await CartModel.find({ ipAddress: ipAddress, isDelete: false });

        if (guestCartItems.length === 0) {
            return res.status(200).json({ message: "No guest cart found" });
        }

        for (let guestItem of guestCartItems) {
            const existingCartItem = await CartModel.findOne({
                user: userId,
                cartItem: guestItem.cartItem,
                isDelete: false
            });
            
            if (existingCartItem) {
                existingCartItem.quantity += guestItem.quantity;
                existingCartItem.totalPrice = existingCartItem.quantity * existingCartItem.price;
                await existingCartItem.save();
            } else {
                guestItem.user = userId;
                guestItem.ipAddress = null;
                await guestItem.save();
            }
        }
        await CartModel.deleteMany({ ipAddress });

        return res.status(200).json({ message: "No items left behind! Your guest cart is now linked to your account." });
    } catch (error) { 
        console.log(error);
        res.status(500).json({ message: `Internal Server Error: ${error.message}` });
    }
}



() Merge Cart Item code
exports.mergeGuestCart = async (req, res) => {
    try {
        console.log("Request user:", req.user); 

        if (!req.user || !req.user._id) {  
            return res.status(401).json({ message: "Unauthorized: User not found" });
        }

        const { _id: userId, userName, email } = req.user;
        const { ipAddress } = req.body;

        console.log("User ID:", userId);
        console.log("User Name:", userName);
        console.log("IP Address:", ipAddress);

        if (!ipAddress) {
            return res.status(400).json({ message: "IP address is required" });
        }

        const guestCartItems = await CartModel.find({ ipAddress, isDelete: false });

        if (guestCartItems.length === 0) {
            return res.status(200).json({ message: "No guest cart found" });
        }

        for (let guestItem of guestCartItems) {
            const existingCartItem = await CartModel.findOne({
                userId: userId,
                cartItem: guestItem.cartItem,
                isDelete: false
            });

            if (existingCartItem) {
                existingCartItem.quantity += guestItem.quantity;
                existingCartItem.totalPrice = existingCartItem.quantity * existingCartItem.price;
                await existingCartItem.save();
            } else {
                guestItem.userId = userId;
                guestItem.userName = userName;  
                guestItem.email = email;        
                guestItem.ipAddress = null;
                await guestItem.save();
            }
        }

        await CartModel.deleteMany({ ipAddress });

        return res.status(200).json({ message: "No items left behind! Your guest cart is now linked to your account." });
    } catch (error) { 
        console.error(error);
        res.status(500).json({ message: `Internal Server Error: ${error.message}` });
    }
};